function_type,function_mysql,description,returns,argument_func_mysql,detailed_description,replacing,examples_mysql,
т,"CONCAT(artist, ' - ', trackname)",объединяет значения,т,значения или поля через запятую,"Принимает переменное количество аргументов, выполняет их конкатенацию и возвращает полученный результат. Результатом функции всегда является т, однако аргументы функции могут принадлежать любым типам, поскольку функция неявно преобразует все аргументы в строки перед объединением.",,"SELECT CONCAT(artist, ' - ', trackname)",
т,"CONCAT_WS(', ', id, artist, trackname)",объединяет значения через разделитель,т,"'разделитель', знач1, ..., значn","Объединяет значения и добавляет между ними разделитель. Разделитель указывается в качестве первого аргумента, объединяемые значения — в качестве всех остальных. Перед объединением неявно преобразует все аргументы в строки",,"SELECT CONCAT_WS(', ', id, artist, trackname)",
т,CHAR_LENGTH('bee'),длина строки,ч,строка,принимает в качестве аргумента строку и возвращает количество символов в ней.  При вызове с аргументом NULL возвращают значение NULL.,,SELECT CHAR_LENGTH('beegeek'),
т,LOWER('BeeGeek'),перевод в нижний регистр,т,строка,используется для перевода строки в нижний регистр. При вызове с аргументом NULL возвращают значение NULL.,,SELECT LOWER('beegeek'),
т,UPPER('BeeGeek'),перевод в верхний регистр,т,строка,используется для перевода строки в верхний регистр. При вызове с аргументом NULL возвращают значение NULL.,,SELECT  LOWER('BEEGEEK'),
т,LTRIM('   bee'),,убирает пробелы слева,т,строка,убирает пробелы слева. При вызове с аргументом NULL возвращают значение NULL.,,SELECT LTRIM(' bee')
т,RTRIM(' bee    '),убирает пробелы справа,т,строка,убирает пробелы справа. При вызове с аргументом NULL возвращают значение NULL.,,,
т,REVERSE('eeb'),переворачивает строку,т,строка,переворачивает строку (можно с чвыми). При вызове с аргументом NULL возвращают значение NULL.,,,
т,"REPEAT('bee', 2)",повторяет,т,"строка, сколько раз повторить","повторяет строку (можно с чвыми)ю Если количество повторов меньше 1, то функция REPEAT() вернет пустую строку.  При вызове с аргументом NULL возвращают значение NULL.",,,
т,"LPAD('bee', 5, '-')",добавить слева,т,"исх_т, желаемая_длина_строки, чем_дополнить","используется для увеличения длины строки до определенного значения путем добавления в ее начало другой строки (можно с чвыми). Если длина исходной строки после добавления в ее начало дополняющей строки превышает желаемую длину, то функция LPAD() сокращает дополняющую строку путем отбрасывания правых символов. При вызове с аргументом NULL возвращают значение NULL.",CONCAT(),,
т,"RPAD('bee', 5, '-')    ",добавить справа,т,"исх_т, желаемая_длина_строки, чем_дополнить","используется для увеличения длины строки до определенного значения путем добавления другой строки справа(можно с чвыми). Если длина исходной строки после добавления справа дополняющей строки превышает желаемую длину, то функция LPAD() сокращает дополняющую строку путем отбрасывания правых символов. При вызове с аргументом NULL возвращают значение NULL.",CONCAT(),"SELECT RPAD('bee', 7, '-+')",
т,"LEFT('bee', 1)  =b",извлеч из начала строки,т,"исх_т, кол-во извлекаемых символов","извлечения определенного количества символов из начала строки. Если количество извлекаемых символов меньше 1, функция LEFT() вернет пустую строку.  ",SUBSTRING(),,
т,"RIGHT('bee', 1)  =e",извлеч из конца строки,т,"исх_т, кол-во извлекаемых символов","извлечения определенного количества символов из конца строки. Если количество извлекаемых символов меньше 1, функция вернет пустую строку.  ",SUBSTRING(),,
т,"LOCATE('e', 'beegeek', 2)  *2-начало поиска, необ",местоположения подстроки в строке,ч,"искомая_подтб, исходная_т, позиция_начала_поиска","определения местоположения подстроки в строке. Позиция начала поиска (может не указываться, в таком случае поиск выполняется с начала строки) . Если искомой подстроки в строке нет, функция LOCATE() вернет значение 0. выполняет поиск позиции подстроки без учета регистра.  символы исходной строки нумеруются с 1, а не с 0.  ","LEFT(), RIGHT(), FIELD","SELECT LOCATE('e', 'beegeek'),        LOCATE('g', 'beegeek'),        LOCATE('eg', 'beegeek'),",
т,"REPLACE('beegeek', 'e', 'i')",замена подстроки в строке,т,"исходная_т, заменяемая_подт, заменяющая_подт","замены подстроки в строке. Если заменяемой подстроки в строке нет, функция REPLACE() вернет строку в исходном виде. выполняет замену с учетом регистра.  ",TRIM(),"SELECT REPLACE('beegeek', 'e', 'i')",
т,"SUBSTRING('beegeek', 4, 2) *4-начало извл, 2-длина фрагмента, необ","извлечения подстроки из строки. Если в аргументах будет только 1 цифра, будет взят отрезок с этого символи и до конца",т,"исходная_строка, позиция_первого_извлекаемого_символа, длина_извлекаемой_ подстроки","извлечения подстроки из строки. длина извлекаемой подстроки (может не указываться, в таком случае подт извлекается до конца) . символы исходной строки нумеруются с 1, а не с 0. Позиция первого извлекаемого символа может быть отрицательным чм, в таком случае символы нумеруются с конца. Последнему символу соответствует позиция -1, предпоследнему — -2, и так далее.  ",,"SELECT SUBSTRING('beegeek', 1),        SUBSTRING('beegeek', -4),        SUBSTRING('beegeek', 4, 2)",
т,"SUBSTRING_INDEX('g-e-e-k', '-', 1) =g ",извлечения подстроки с помощью разделителя,т,"исходная_т, разделитель, количество_появлений_ разделителя","извлечения подстроки из строки с помощью разделителя. Количество появлений разделителя может быть отрицательным чм, в таком случае извлечение подстроки происходит с конца.",,"SELECT SUBSTRING_INDEX('g-e-e-k', '-', 1)     ----    g ,        SUBSTRING_INDEX('g-e-e-k', '-', 2)     -----   g-e ,",
т,TRIM(LEADING '-' FROM '--bee--'),удаления всех вхождений подстроки,т,"TRIM(<ключевое слово LEADING, TRAILING или BOTH> <удаляемая подт> FROM <исходная т>)","удаления всех вхождений подстроки из начала и/или конца строки. Ключевые слова LEADING, TRAILING и BOTH могут не указываться, в таком случае удаление подстроки происходит из начала и конца строки. Удаляемая подт также может быть опущена, в таком случае ею считается пробел.  Если не указаны и ключевое слово, и удаляемая подт, функция TRIM() выполнит удаление всех пробелов из начала и конца строки.  ",REPLACE(),"SELECT TRIM(LEADING '-' FROM '--bee--'),        TRIM(TRAILING '-' FROM '--bee--'),        TRIM(BOTH '-' FROM '--bee--');",
ч,ABS(-1),модуль,ч,ч,вычисления модуля числа,,,
ч,"ROUND(23.165, 2)",округление,ч,"ч, количество знаков после запятой","возвращает ч, округленное до указанных знаков после запятой.  округляет ч согласно математическим правилам округления, то есть в большую по модулю сторону. Количество знаков после запятой может быть не указано, в таком случае функция ROUND() выполнит округление до целого числа.",,"SELECT ROUND(23.165, 2)",
ч,"POW(2, 3)",возведение в степень,ч,"ч, степень","возвращает ч, возведенное в указанную степень.",,"SELECT POW(2, 3)",
ч,SQRT(9),корень,ч,ч,вычисления квадратного корня.,,"SELECT SQRT(0),        SQRT(9),        SQRT(20);",
ч,RAND(),генератор случ. Чисел,ч,начальное значение(необязательно),"генерация случайных чисел. При вызове без аргументов она возвращает случайное ч с плавающей точкой в диапазоне [0, 1). С одним и тем же аргументом функция будет возвращать одно и то же случайное ч.  ",,SELECT * FROM SQLTeam ORDER BY RAND() LIMIT 2, -- извлечение случайных записей из таблицы
ч,FLOOR(3.5) =3,округление в меньшую сторону,ч,ч,округление в меньшую сторону до целого,,,
ч,CEILING(3.4) =4,округление в большую сторону,ч,ч,округление в большую сторону до целого,,,
ч,DEGREES(1)   = 57.29577951308232,из радиан в градусы,ч,значение в радианах,"перевода значения из радиан в градусы. Она принимает в качестве аргумента значение в радианах, конвертирует его в градусы и возвращает полученный результат.",,SELECT DEGREES(1)    -----  57.29577951308232,
ч,RADIANS(180)    =    3.141592653589793,градусы в радианы,ч,значение в градусах,перевод — из градусов в радианы.,,SELECT  RADIANS(180)     -----    3.141592653589793,
ч,PI(),ч Пи,ч,,Она не принимает никаких аргументов и возвращает ч пи с точностью до шести знаков после запятой.,,,
ч,SIN(),синус,ч,ч в радианах, принимает в качестве аргумента значение в радианах и возвращает соответствующую тригонометрическую величину.,,,
ч,COS(),косинус,ч,ч в радианах, принимает в качестве аргумента значение в радианах и возвращает соответствующую тригонометрическую величину.,,,
ч,TAN(),тангенс,ч,ч в радианах, принимает в качестве аргумента значение в радианах и возвращает соответствующую тригонометрическую величину.,,,
ч,LEAST(),наименьшее,ч,аргументы,"принимает переменное количество аргументов (не меньше двух) и возвращает наименьший из них.   Если поиск минимального значения происходит среди действительных (типы FLOAT и DOUBLE) и целых чисел, функция LEAST() сначала преобразует все числа в действительные.  Если хотя бы один из аргументов, переданных в функцию LEAST(), является строкой, функция перед поиском минимального значения сначала преобразует все аргументы в строки.  Если хотя бы один из аргументов, переданных в функцию LEAST(), равняется NULL, возвращаемым значением функции также будет NULL.  ",,"SELECT LEAST(2, 1, 3, 5, 4)    ----   1",
ч,GREATEST(),наибольшее,ч,аргументы,выполняет поиск наибольшего значения.,,,
ч,CONV(),перевод в с-му исчисления,ч,"ч, система счисления (в которой представлено ч), система счисления (в которую нужно перевести ч)",перевода числа из одной системы счисления в другую.,,"SELECT CONV(5, 10, 2)    ----    101",
ч,FORMAT(),округление и форматирование,т,"ч, кол-во знаков после запятой","округляет ч num до decimals знаков после запятой, форматирует его путем разбиения на разряды и возвращает полученный результат в виде строки.  Если указанное количество знаков после запятой больше фактического количества знаков у числа, функция FORMAT() заполнит недостающие знаки незначащими нулями.",,"SELECT FORMAT(1000000.1653, 3)     -----  1,000,000.165",
д/в,NOW(),текущая д/в,д/в,,не принимает никаких аргументов и возвращает текущую дату и в в локальном часовом поясе,,SELECT NOW(),
д/в,CURDATE(),текущая д  ,д,,текущая д  ,,,
д/в,CURTIME(),текущее в,в,,текущее в,,,
д/в,UTC_TIMESTAMP(),текущая д/в по UTS,д/в,,"не принимает никаких аргументов и возвращает текущую дату и в в UTC, то есть в нулевом часовом поясе.",,,
д/в,UTC_DATE(),текущая д по UTS    ,д,,текущая д по UTS    ,,,
д/в,UTC_TIME(),текущее в по UTS    ,в,,текущее в по UTS    ,,,
д/в,MAKEDATE(),создание даты,д,"год, номер дня в году","возвращает дату, которая имеет порядковый номер day в году year.  Если хотя бы один из аргументов, переданных в функции MAKEDATE() и MAKETIME(), являeтся значением NULL, функции вернут значение NULL.",,"SELECT MAKEDATE(2023, 1),        MAKEDATE(2023, 255),        MAKEDATE(2023, 365);",
д/в,MAKETIME(),создание временного значения,в,"часы, минуты, секунды","возвращает временное значение, состоящее из часов, минут и секунд.  Если хотя бы один из аргументов, переданных в функции MAKEDATE() и MAKETIME(), являeтся значением NULL, функции вернут значение NULL.",,"SELECT MAKETIME(12, 33, 1),        MAKETIME(0, 1, 2),        MAKETIME(21, 11, 42);",
д/в,TIME_TO_SEC(),в в секунды,ч,временное значение,"принимает в качестве аргумента временное значение, преобразует его в количество секунд. при вызове с аргументом NULL возвращают значение NULL.  ",,"SELECT TIME_TO_SEC('00:00:25'),        TIME_TO_SEC('00:01:30'),        TIME_TO_SEC('01:00:00');",
д/в,SEC_TO_TIME(),Кол-во секунд во в,в,Кол-во секунд,преобразование количества секунд во временное значение. при вызове с аргументом NULL возвращают значение NULL.  ,,"SELECT SEC_TO_TIME(25),        SEC_TO_TIME(90),        SEC_TO_TIME(3600);",
д/в,TO_DAYS(),д в кол-во дней,ч,д,"принимает в качестве аргумента дату, преобразует ее в количество дней. отсчет количества дней начинается с нулевого года. при вызове с аргументом NULL возвращают значение NULL.  ",,"SELECT TO_DAYS('2023-04-01'),        TO_DAYS('0001-01-01'),        TO_DAYS('0000-01-01');",
д/в,TO_SECONDS(),д в кол-во секунд,ч,д,преобразует дату в количество секунд.  при вызове с аргументом NULL возвращают значение NULL.  ,,,
д/в,LAST_DAY(),последний день месяца,д,д,"принимает в качестве аргумента дату, заменяет в ней день на последний день месяца этой даты.  при вызове с аргументом NULL возвращают значение NULL.  ",,"LAST_DAY('2023-02-14'),",
д/в,DATE(),д  ,д,д/в,"принимает в качестве аргумента дату и в, извлекает из него дату и возвращает полученный результат. Если аргументом функции DATE() является д без времени, функция вернет ее в исходном виде.  ",,SELECT DATE('2023-10-20 12:30:00')    ---- 2023-10-20,
д/в,TIME(),в,в,д/в,"принимает в качестве аргумента дату и в, извлекает из него в и возвращает полученный результат. Если аргументом функции является в без даты, функция вернет ее в исходном виде.  ",,,
д/в,HOUR(),Кол-во часов,ч,в,"определения количества часов во времени. Она принимает в качестве аргумента временное значение, извлекает из него часы и возвращает полученный результат.",,SELECT HOUR('12:30:10')    ---  12,
д/в,MINUTE(),Кол-во минут,ч,в,"принимает в качестве аргумента временное значение, извлекает из него минуты и возвращает полученный результат.",,SELECT MINUTE('12:30:10.1415')   ---   30,
д/в,SECOND(),Кол-во секунд,ч,в,"принимает в качестве аргумента временное значение, извлекает из него секунды и возвращает полученный результат.",,SELECT SECOND('12:30:10.1415')    ----  10,
д/в,MICROSECOND(),Кол-во микросекунд,ч,в,"принимает в качестве аргумента временное значение, извлекает из него микросекунды и возвращает полученный результат.",,SELECT MICROSECOND('12:30:10.1415')    ----  141500,
д/в,YEAR(),год,ч,д,извлечения значения года из даты.,,,
д/в,MONTH(),номер месяца,ч,д,извлечения значения месяца из даты.,,,
д/в,DAY(),день,ч,д,извлечения значения дня из даты.,,,
д/в,DAYOFYEAR(),номер дня в году,ч,д,вычисления номера дня в году (от 1 до 366) на основе даты.,,SELECT DAYOFYEAR('2023-02-01')    ---32,
д/в,WEEK(),номер недели в году,ч,д,вычисления номера недели в году на основе даты.,,SELECT WEEK('2023-12-31')   ---  53,
д/в,WEEKDAY(),номер дня недели,ч,д,вычисления номера дня недели (от 0 до 6) на основе даты.,,SELECT WEEKDAY('2023-10-16')   ---  0  (понедельник),
д/в,QUARTER(),квартал,ч,д,вычисления номера квартала (от 1 до 4) на основе даты.,,,
д/в,DAYNAME(),день недели (англ),т,д,"принимает в качестве аргумента дату, определяет день недели, который соответствует переданной дате, и возвращает его полное название.",,SELECT DAYNAME('2023-10-16')    ---- Monday,
д/в,MONTHNAME(),название месяца (англ),т,д,определения названия месяца на основе даты.,,SELECT MONTHNAME('2023-01-01')    ----   January,
д/в,ADDDATE(),прибавления временного интервала,д (+-в),"д/в, временной интервал",прибавления временного интервала к дате и времени.,,"SELECT ADDDATE('2023-10-20 07:30:00', INTERVAL 4 DAY)",
д/в,SUBDATE(),вычитает временной интервал,д (+-в),"д/в, временной интервал","вычитает временной интервал из даты и времени,",,"SELECT SUBDATE('2023-10-20 07:30:00', INTERVAL 4 HOUR)",
д/в,ADDTIME(),прибавляет в,в (± д),"д/в (в), в",прибавления временного значения к дате и времени.,,"SELECT ADDTIME('2023-10-20 21:00:00', '02:00:00'),  ADDTIME('21:30:00', '08:30:00')",
д/в,SUBTIME(),отнимает в,в (± д),"д/в (в), в","вычитает временное значение из даты и времени. Если первое временное значение, переданное в функцию SUBTIME(), меньше второго, функция вернет отрицательный результат.  ",,"SELECT  SUBTIME('2023-10-20 21:00:00', '06:00:00'),        SUBTIME('20:40:00', '10:00:00');",
д/в,DATEDIFF(),разница в днях,ч,"1 д/в (д), 2 д/в(д)","вычисления разницы в днях между двумя значениями даты и времени. Если первая д/в, переданная в функцию DATEDIFF(), меньше второй, функция вернет отрицательный результат.  При вычислении разницы функция DATEDIFF() использует только дату, в не используется",,"SELECT DATEDIFF('2023-10-26 07:30:00', '2023-10-20 8:00:00')    ---   6",
д/в,TIMEDIFF(),разница во времени,в,"1 д/в (в), 2 д/в(в)","вычисления разницы во времени между двумя значениями даты и времени.  Если первая д/в, переданная в функцию TIMEDIFF(), меньше второй, функция вернет результат в виде отрицательного временного значения.",,"SELECT  TIMEDIFF('2023-10-25 9:00:00', '2023-10-20 07:00:00')    ----   122:00:00",
д/в,TIMESTAMPDIFF(),разница в единицах измерения,ч,"единица измерения (в которой требуется получить разницу),  1 д/в (д), 2 д/в(д)","вычисления разницы между двумя значениями даты и времени в определенных единицах измерения. Если первое д/в, переданное в функцию TIMESTAMPDIFF(), больше второго, функция вернет отрицательный результат.  Каждый из аргументов, передаваемых в функцию TIMESTAMPDIFF(), может быть как датой и временем, так и просто датой, при этом д имеет нулевые значения по всем компонентам времени.",,"SELECT TIMESTAMPDIFF(HOUR, '2023-10-20 07:00:00', '2023-10-20 12:00:00') AS hours     ----  5",
д/в,TIMESTAMP(),обьединение даты и времени,д/в,"д, в","объединения даты и временного значения. Функция TIMESTAMP() автоматически конвертирует каждые 24 часа в 1 день.  Временное значение может не указываться, в таком случае оно будет принято равным 00:00:00.",,"SELECT TIMESTAMP('2023-10-20', '28:00')   ---- 2023-10-21 04:00:00",
д/в,DATE_FORMAT(),форматирования даты и времени,т,"д/в (д), т формата","форматирования даты и времени. в качестве первого аргумента может принимать не только дату и в, но и просто дату. Во втором случае считается, что д имеет нулевые значения по всем компонентам времени.",,"SELECT DATE_FORMAT('2023-10-20 07:30:00', '%H:%i, %d.%m.%Y')    ----   07:30, 20.10.2023",
д/в,TIME_FORMAT(),форматирование времени,т,"временное значение, т формата",форматирование времени,,"SELECT TIME_FORMAT('12:30:00', 'Time: %H:%i')     -----   Time: 12:30",
д/в,STR_TO_DATE(),т в дату,д (+-в),"т с компонентами даты и времени, т формата","Функция извлекает из строки string компоненты даты и времени в соответствии с форматом format и возвращает дату и в на основе извлеченных компонентов. Если в строке с компонентами представлены только компоненты даты, функция STR_TO_DATE() вернет дату без времени, если только компоненты времени — в без даты.  При этом для создания даты или даты и времени должны быть определены все компоненты даты (год, месяц, ч), и если хотя бы один компонент пропущен, функция вернет значение NULL. В случае с временным значением достаточно одного любого компонента, остальные по умолчанию примут значение 0.  Во в использования функции STR_TO_DATE() необходимо следить за тем, чтобы т с компонентами даты и времени полностью соответствовала строке формата, в противном случае функция вернет значение NULL.",,"SELECT STR_TO_DATE('07:30, 20.10.2023', '%H:%i, %d.%m.%Y')     -----    2023-10-20 07:30:00",
д/в,GET_FORMAT(),получение формата,формат,"(type,format) type — тип объекта, для которого требуется т формата (DATE, TIME или DATETIME)       format — непосредственно формат (USA, JIS, ISO или EUR) ","получения определенной строки формата для даты, времени или даты и времени.",,"SELECT GET_FORMAT(DATETIME, 'EUR')    ----   %Y-%m-%d %H.%i.%s",
дополнительные,ISNULL(),проверка на NULL,1 или 0,значение,"принимает в качестве аргумента произвольное значение и возвращает 1, если переданным значением является NULL, или 0 в противном случае.",,"SELECT ISNULL(0)   ---   0,        ISNULL(NULL)       -----    1;",
дополнительные,IF(),условие - 2 значения,значение,"условное выражение, значение1, значение2","используется для выбора одного из двух значений в зависимости от результата некоторого условного выражения. возвращает значение1, если условное выражение истинно, или значение2 в противном случае.",,"SELECT IF(1 > 0, 'bee', 'geek')     ----    bee",
дополнительные,COALESCE(),первый не NULL из списка значений,значение,аргументы ч-з запятую,"поиск первого непустого значения. Она принимает переменное количество аргументов и возвращает первый из них, не равный NULL.",IFNULL,"SELECT COALESCE(1, 2, 3)   ---   1,        COALESCE(NULL, 2, 3)   ---   2,        COALESCE(1, NULL, 3)    ---   1",
дополнительные,IFNULL(),меняет NULL на значение,значение,"исходное проверяемое значение, альтернативное значение","замена некоторого значения на альтернативное, если исходное значение равняется NULL.  возвращает значение value, если оно не равняется NULL, или значение alternative_value в противном случае.",,"SELECT IFNULL(NULL, 'geek')    ----    geek,        IFNULL('bee', 'geek')    ----    bee",
дополнительные,NULLIF(),Сравнивает 2 значения,NULL или значение,"значение1, значение2","сравнение двух значений.  возвращает значение NULL, если значения value1 и value2 совпадают, или значение value1 в противном случае.  ",,"SELECT NULLIF('bee', 'bee')     ----    NULL,        NULLIF('bee', 'geek')    ----    bee",
дополнительные,CONVERT(),конвертация типов данных,значение,"значения (кот нужно преобразовать), тип","Функция приводит значение value к типу type и возвращает полученный результат.  Значение, приводимое к определенному типу, должно соответствовать формату этого типа, в противном случае функция CONVERT() вернет значение NULL.  Однако при попытке привести несоответствующее формату значение к чвому типу функция CONVERT() вернет значение 0.  ",,"SELECT CONVERT(100.78, DECIMAL(4, 1))   ---   100.8,   SELECT CONVERT CONVERT('beegeek', DATE)   ---   NULL,    SELECT CONVERT('beegeek', SIGNED)   ---   0",
дополнительные,CASE…. END,условные конструкции — значения,значение,набор условных конструкций,проверку нескольких условий и в зависимости от истинности одного из них вернуть соответствующее значение.,,"SELECT title, author, UPPER(CASE      WHEN price < 5 THEN 'Cheap'     WHEN price BETWEEN 5 AND 15 THEN 'Regular'     ELSE 'Expensive'     END) AS rate FROM Books;     ORDER BY CASE     WHEN title LIKE 'The %' THEN 1 ELSE 2 END;",
дополнительные,FIELD(),порядковый номер из списка,ч,"поле, аргументы для сравнения ч-з запятую","возвращает индекс одного из аргументов (начиная со второго аргумента, который имеет индекс 1) при совпадении первого аргумента с ним, или 0 при отсутствии совпадений.",,"ORDER BY FIELD(status, 'Basic', 'Bronze', 'Silver', 'Gold') DESC, name",
агрегатные,AVG(),среднее арифметическое ,ч,поле (набор значений),"вычисления среднего арифметического чвых значений поля.  игнорирует значения NULL при вычислении среднего арифметического значений поля. можно использовать ключевое слово DISTINCT, чтобы в итоговых вычислениях участвовали лишь уникальные значения поля. возвращают значение 0.0, если применяются к нечвым полям.",,SELECT AVG(streams) AS avg_streams FROM Songs WHERE release_year >= 2000,
агрегатные,COUNT(),Кол-во записей,ч,* для опр кол-ва записей (поле для опр кол-ва значений),"подсчета количества записей в таблице или количества значений в поле.  Для определения количества значений в поле функции COUNT() в качестве аргумента необходимо передать это поле.  Для определения количества записей в таблице в функцию COUNT() в качестве аргумента необходимо передать звездочку (*).    Важным отличием между вызовами COUNT(*) и COUNT(<название поля>) является то, что в первом случае возвращается количество записей в таблице без учета значений в этих записях, в то в как во втором случае возвращается количество значений в поле, причем значения NULL не учитываются.  можно использовать ключевое слово DISTINCT, чтобы в итоговых вычислениях участвовали лишь уникальные значения поля  ",,"SELECT COUNT(*) AS num_of_songs,        COUNT(release_year) AS num_of_years FROM Songs;",
агрегатные,MIN(),минимальное значение,значение,поле,поиска минимального значений в поле. игнорируют значения NULL при вычислении. применяется и к строковым полям.,,,
агрегатные,MAX(),максимальное значение,значение,поле,поиска ммаксимального значений в поле. игнорируют значения NULL при вычислении. применяется и к строковым полям.,,,
агрегатные,SUM(),сумма,ч,поле,"вычисления суммы чвых значений поля.  игнорирует значения NULL.  можно использовать ключевое слово DISTINCT, чтобы в итоговых вычислениях участвовали лишь уникальные значения поля. возвращают значение 0.0, если применяются к нечвым полям.",,"SELECT SUM(WEEKDAY(submit_date) BETWEEN 5 AND 6) AS weekend_count,",
агрегатные,GROUP_CONCAT(trackname SEPARATOR ', '),перечисления значений поля,значения,поле,"перечисления значений поля через запятую. Перечисляемые функцией GROUP_CONCAT() значения можно сортировать.  Запятая является разделителем по умолчанию, и его можно изменить. Чтобы задать собственный разделитель, необходимо воспользоваться ключевым словом SEPARATOR, после которого предоставить строку, содержащую разделитель. игнорирует значения NULL.  можно использовать ключевое слово DISTINCT, чтобы в итоговых вычислениях участвовали лишь уникальные значения поля",,       
оконные,ROW_NUMBER(),порядковый номер записи в рамках указанного окна (начиная с 1),,,"вычисляет порядковый номер записи в рамках указанного окна (начиная с 1). ORDER BY в спецификации окна определяет порядок записей лишь внутри окна.  Секционирование выполняется с помощью оператора PARTITION BY. Если нужно секционирование и упорядочивание, то оператор PARTITION BY должен располагаться до оператора ORDER BY",,ROW_NUMBER() OVER (PARTITION BY department ORDER BY salary DESC) AS row_num,
оконные,DENSE_RANK(),ранг записи в рамках указанного окна.,,,"вычисляет ранг записи в рамках указанного окна. Функция присваивает первой записи окна ранг, равный 1, и увеличивает его каждый раз, когда очередная запись в поле (или полях) упорядочивания содержит значение, отличное от значения предыдущей записи в том же поле.",,DENSE_RANK() OVER (PARTITION BY department ORDER BY salary DESC) AS place,
оконные,RANK(),ранг записи в рамках указанного окна с пропуском при повторении,,,"выполняет ранжирование в рамках указанного окна, при повторении рангов следующий ранг отбрасывает.",,,
оконные,NTILE(),разбивает на группы,,Кол-во групп,"разбиения окна на заданное количество групп равного размера. если окно из n записей делится на k групп, то первые n % k (остаток от деления n на k) групп будут содержать ровно на 1 запись больше, чем остальные группы.",,NTILE(3) OVER (ORDER BY id) AS group_number,
оконные,AVG(),среднее арифметическое ,,поле,"среднее арифметическое чвых значений, хранящихся в определенном поле окна. игнорируют значения NULL. возвращают значение 0.0, если применяются к нечвым полям.",,AVG(salary) OVER (PARTITION BY department) AS department_avg_salary,
оконные,SUM(),сумма,,поле,"Вычисляет сумму чвых значений, хранящихся в определенном поле окна. игнорируют значения NULL. возвращают значение 0.0, если применяются к нечвым полям.",,"SUM(salary) OVER () AS sum_salary, SUM(salary) OVER (PARTITION BY department) AS department_sum_salary",
оконные,COUNT(),подсчет записей,,поле или *,"подсчета записей или непустых значений в поле. Если ее аргументом является звездочка (*), функция вычисляет количество записей в окне, если название поля — количество непустых значений в этом поле окна.",,"COUNT(*) OVER (PARTITION BY department) AS employess_in_department, COUNT(salary) OVER (PARTITION BY department) AS employess_in_department_with_salary",
оконные,MIN(),минимум,,поле,"вычисляет минимальное значение, хранящиеся в определенном поле окна, игнорируют значения NULL",,MIN(salary) OVER (PARTITION BY department) AS department_min_salary,
оконные,MAX(),максимум,,поле,"вычисляет максимальное значение, хранящиеся в определенном поле окна, игнорируют значения NULL",,MAX(salary) OVER (PARTITION BY department) AS department_max_salary,
оконные,FIRST_VALUE(),значение первой записи окна,,поле,"получения значения, которое содержится в определенном поле первой записи окна. Исп только с упорядоченными окнами.",,FIRST_VALUE(salary) OVER (ORDER BY id) AS first_employee_salary,
оконные,LAST_VALUE(),значение последней записи окна,,поле,"получения значения, которое содержится в определенном поле последней записи окна. Если границы не определены то окно - от самой первой записи до текущей. Исп только с упорядоченными окнами.",,LAST_VALUE(salary) OVER (ORDER BY id ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_employee_salary,
оконные,NTH_VALUE(),значение n-ой записи окна,,"поле, номер записи","получения значения, которое содержится в определенном поле n-ой записи окна (начиная с 1).  Важно определение границ. Исп только с упорядоченными окнами. возвращает значение NULL если выходит за рамки",,,
оконные,LAG(),значения отстающей от текущей на n,,"поле, номер записи, значение если функция выходит за рамки окна","получения значения, которое содержится в определенном поле записи окна, отстающей от текущей на n. Возвращает значение NULL, если пытается получить значение записи, выходящей за рамки окна. В случае выхода за рамки окна функция LAG() умеет возвращать не только NULL, но и любое другое значение. Для этого при вызове функции достаточно указать необходимое значение в качестве третьего аргумента. Полностью игнорирует границы окна. Используется только с упорядоченными окнами.",,"LAG(salary, 1, 0) OVER (ORDER BY id) AS prev_employee_salary",
оконные,LEAD(),значения опережающей текущую на n.,,"поле, номер записи, значение если функция выходит за рамки окна","получения значения, которое содержится в определенном поле записи окна, опережающей текущую на n. Полностью игнорирует границы окна. Используется только с упорядоченными окнами.  ",,"LEAD(salary, 1, 0) OVER (ORDER BY id) AS next_employee_salary",
